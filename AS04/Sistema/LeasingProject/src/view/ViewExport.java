/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Date;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import json.JSONObject;
import model.bean.Client;
import model.bean.Leasing;
import model.bean.Vehicle;
import model.dao.ClientDAO;
import model.dao.LeasingDAO;
import model.dao.VehicleDAO;
import xml.DateConverter;

/**
 *
 * @author Near
 */
public class ViewExport extends javax.swing.JFrame {

    String window = "";
    private String selected = "Portuguese";

    /**
     * Creates new form ViewExport
     */
    public ViewExport(String window, String language) {
        this.window = window;
        initComponents();
        setLocationRelativeTo(null);
        this.selected = language;
        changeLanguage(selected);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_name = new javax.swing.JLabel();
        button_export_txt = new javax.swing.JButton();
        button_export_json = new javax.swing.JButton();
        button_export_xml = new javax.swing.JButton();
        button_export_cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_name.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_name.setText("Selecione o formato a ser exportado");

        button_export_txt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        button_export_txt.setText("Txt");
        button_export_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_export_txtActionPerformed(evt);
            }
        });

        button_export_json.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        button_export_json.setText("Json");
        button_export_json.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_export_jsonActionPerformed(evt);
            }
        });

        button_export_xml.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        button_export_xml.setText("Xml");
        button_export_xml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_export_xmlActionPerformed(evt);
            }
        });

        button_export_cancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        button_export_cancelar.setText("Cancelar");
        button_export_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_export_cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(label_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(56, 56, 56))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(button_export_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button_export_txt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(56, 56, 56)
                        .addComponent(button_export_json, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(57, 57, 57)
                .addComponent(button_export_xml, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(label_name)
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_export_txt)
                    .addComponent(button_export_json)
                    .addComponent(button_export_xml))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(button_export_cancelar)
                .addGap(58, 58, 58))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void changeLanguage(String language) {
        switch (language) {
            case "Portuguese":
                label_name.setText("Selecione o formato a ser exportado");
                button_export_cancelar.setText("Cancelar");
                break;
            case "English":
                label_name.setText("Select the format to export");
                button_export_cancelar.setText("Cancel");
                break;
            case "Spanish":
                label_name.setText("Seleccione el formato que desea exportar");
                button_export_cancelar.setText("Cancelar");
                break;
            default:
                label_name.setText("Selecione o formato a ser exportado");
                button_export_cancelar.setText("Cancelar");

        }
    }
    private void button_export_jsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_export_jsonActionPerformed
        switch (window) {
            case "Vehicle":
                File vehicle = new File("Vehicle.json");
                if (vehicle.exists()) {
                    vehicle.delete();
                }
                String contentVehicle;
                try {

                    VehicleDAO pdao = new VehicleDAO();
                    FileWriter f = new FileWriter(vehicle, true);
                    for (Vehicle p : pdao.read()) {
                        JSONObject json = new JSONObject();
                        contentVehicle = p.toJson().toString();
                        contentVehicle += "\r\n";
                        f.write(contentVehicle);
                    }
                    f.close();
                    JOptionPane.showMessageDialog(null, "Date Exported Successfully!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not perform this action");
                }
                new ViewVehicle(selected).setVisible(true);
                this.dispose();
                break;
            case "Client":
                File client = new File("Client.json");
                if (client.exists()) {
                    client.delete();
                }
                String contentClient;
                try {

                    ClientDAO pdao = new ClientDAO();
                    FileWriter f = new FileWriter(client, true);
                    for (Client p : pdao.read()) {
                        JSONObject json = new JSONObject();
                        contentClient = p.toJson().toString();
                        contentClient += "\r\n";
                        f.write(contentClient);
                    }
                    f.close();
                    JOptionPane.showMessageDialog(null, "Date Exported Successfully!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not perform this action");
                }
                new ViewClient(selected).setVisible(true);
                this.dispose();
                break;
            case "Leasing":
                File leasing = new File("Leasing.json");
                if (leasing.exists()) {
                    leasing.delete();
                }
                String contentLeasing;
                try {

                    LeasingDAO pdao = new LeasingDAO();
                    FileWriter f = new FileWriter(leasing, true);
                    for (Leasing p : pdao.read()) {
                        JSONObject json = new JSONObject();
                        contentLeasing = p.toJson().toString();
                        contentLeasing += "\r\n";
                        f.write(contentLeasing);
                    }
                    f.close();
                    JOptionPane.showMessageDialog(null, "Date Exported Successfully!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not perform this action");
                }
                new ViewLeasing(selected).setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Window invalid");
        }
    }//GEN-LAST:event_button_export_jsonActionPerformed

    private void button_export_xmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_export_xmlActionPerformed
        switch (window) {
            case "Vehicle":
                File vehicleFile = new File("Vehicle.xml");
                if (vehicleFile.exists()) {
                    vehicleFile.delete();
                }
                VehicleDAO pdao = new VehicleDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(vehicleFile, true);
                        for (Vehicle p : pdao.read()) {
                            XStream xstream = new XStream(new DomDriver());
                            xstream.autodetectAnnotations(true);
                            xstream.registerConverter(new DateConverter());
                            String xml = xstream.toXML(p);
                            f.write(xml);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Date Exported Successfully!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Could not perform this action");
                    }
                }
                new ViewVehicle(selected).setVisible(true);
                this.dispose();
                break;
            case "Client":
                File ClientFile = new File("Client.xml");
                if (ClientFile.exists()) {
                    ClientFile.delete();
                }
                ClientDAO pdaoClient = new ClientDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(ClientFile, true);
                        for (Client p : pdaoClient.read()) {
                            XStream xstream = new XStream(new DomDriver());
                            xstream.autodetectAnnotations(true);
                            xstream.registerConverter(new DateConverter());
                            String xml = xstream.toXML(p);
                            f.write(xml);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Date Exported Successfully!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Could not perform this action");
                    }
                }
                new ViewClient(selected).setVisible(true);
                this.dispose();
                break;
            case "Leasing":
                File LeasingFile = new File("Leasing.xml");
                if (LeasingFile.exists()) {
                    LeasingFile.delete();
                }
                LeasingDAO pdaoLeasing = new LeasingDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(LeasingFile, true);
                        for (Leasing p : pdaoLeasing.read()) {
                            XStream xstream = new XStream(new DomDriver());
                            xstream.autodetectAnnotations(true);
                            xstream.registerConverter(new DateConverter());
                            String xml = xstream.toXML(p);
                            f.write(xml);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Date Exported Successfully!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Could not perform this action");
                    }
                }
                new ViewLeasing(selected).setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Window invalid");
        }
    }//GEN-LAST:event_button_export_xmlActionPerformed

    private void button_export_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_export_txtActionPerformed
        SimpleDateFormat in = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat out = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat outTime = new SimpleDateFormat("HH:mm");
        switch (window) {
            case "Vehicle":
                File vehicleFile = new File("Vehicle.txt");
                if (vehicleFile.exists()) {
                    vehicleFile.delete();
                }
                String brand,
                 contentVehicle = "",
                 model,
                 plate,
                 color,
                 year;
                VehicleDAO pdao = new VehicleDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(vehicleFile, true);
                        for (Vehicle p : pdao.read()) {
                            String extraBrand = "";
                            String extraModel = "";
                            String extraPlate = "";
                            String extraColor = "";
                            String extraYear = "";
                            //Brand
                            brand = p.getBrand();
                            int tam_brand = 100 - brand.length();
                            for (int i = 0; i < tam_brand; i++) {
                                extraBrand += " ";
                            }
                            brand += extraBrand;
                            //Model
                            model = p.getModel();
                            int tam_model = 100 - model.length();
                            for (int i = 0; i < tam_model; i++) {
                                extraModel += " ";
                            }
                            model += extraModel;
                            // Plate
                            plate = p.getPlate();
                            int tam_plate = 12 - plate.length();
                            for (int i = 0; i < tam_plate; i++) {
                                extraPlate += " ";
                            }
                            plate += extraPlate;
                            // Color
                            color = p.getColor();
                            int tam_color = 30 - color.length();
                            for (int i = 0; i < tam_color; i++) {
                                extraColor += " ";
                            }
                            color += extraColor;
                            // Year
                            year = Integer.toString(p.getYear());
                            int tam_year = 4 - year.length();
                            for (int i = 0; i < tam_year; i++) {
                                extraYear += "0";
                            }
                            year = extraYear + year;
                            contentVehicle = brand + model + plate + color + year;
                            contentVehicle += "\r\n";
                            f.write(contentVehicle);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Date Exported Successfully!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Could not perform this action");
                    }
                }
                new ViewVehicle(selected).setVisible(true);
                this.dispose();
                break;
            case "Client":
                File clientFile = new File("Client.txt");
                if (clientFile.exists()) {
                    clientFile.delete();
                }
                String contentClient = "",
                 cpf,
                 name,
                 rg,
                 nationality,
                 telephone,
                 gender,
                 birth;
                Date birthTemp;
                ClientDAO pdaoClient = new ClientDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(clientFile, true);
                        for (Client p : pdaoClient.read()) {
                            String extraCpf = "";
                            String extraName = "";
                            String extraRg = "";
                            String extraNationality = "";
                            String extraTelephone = "";
                            String extraGender = "";
                            String extraBirth = "";
                            //CPF
                            cpf = p.getCpf();
                            int tam_cpf = 14 - cpf.length();
                            for (int i = 0; i < tam_cpf; i++) {
                                extraCpf += " ";
                            }
                            cpf += extraCpf;
                            //Name
                            name = p.getName();
                            int tam_name = 100 - name.length();
                            for (int i = 0; i < tam_name; i++) {
                                extraName += " ";
                            }
                            name += extraName;
                            //Rg
                            rg = p.getRg();
                            int tam_rg = 12 - rg.length();
                            for (int i = 0; i < tam_rg; i++) {
                                extraRg += " ";
                            }
                            rg += extraRg;
                            //Nationality
                            nationality = p.getNationality();
                            int tam_nationality = 30 - nationality.length();
                            for (int i = 0; i < tam_nationality; i++) {
                                extraNationality += " ";
                            }
                            nationality += extraNationality;
                            //Telephone
                            telephone = p.getTelephone();
                            int tam_telephone = 30 - telephone.length();
                            for (int i = 0; i < tam_telephone; i++) {
                                extraTelephone += " ";
                            }
                            telephone += extraTelephone;
                            //Gender
                            gender = p.getGender();
                            int tam_gender = 30 - gender.length();
                            for (int i = 0; i < tam_gender; i++) {
                                extraGender += " ";
                            }
                            gender += extraGender;
                            //Birth
                            birthTemp = p.getBirth();
                            birth = out.format(in.parse(birthTemp.toString()));
                            int tam_birth = 10 - birth.length();
                            for (int i = 0; i < tam_birth; i++) {
                                extraBirth += " ";
                            }
                            birth += extraBirth;
                            contentClient = name + cpf + rg + nationality + telephone + gender + birth;
                            contentClient += "\r\n";
                            f.write(contentClient);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Date Exported Successfully!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Could not perform this action");
                    } catch (ParseException ex) {
                        Logger.getLogger(ViewExport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                new ViewClient(selected).setVisible(true);
                this.dispose();
                break;
            case "Leasing":
                File leasingFile = new File("Leasing.txt");
                if (leasingFile.exists()) {
                    leasingFile.delete();
                }
                String contentLeasing = "",
                 cpfLeasing,
                 plateLeasing,
                 dateLeasing,
                 dateDevolution,
                 horaLeasing,
                 horaDevolution,
                 numberLeasing;
                Date dateLea,
                 dateDev;
                Time horaLea,
                 horaDev;
                LeasingDAO daoLeasing = new LeasingDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(leasingFile, true);
                        for (Leasing p : daoLeasing.read()) {
                            String extraDateLea = "";
                            String extraDateDev = "";
                            String extraHoraLea = "";
                            String extraHoraDev = "";
                            String extraNumberLea = "";
                            String extraCpfLeasing = "";
                            String extraPlateLeasing = "";
                            // Date Leasing
                            dateLea = p.getDateLeasing();
                            dateLeasing = out.format(in.parse(dateLea.toString()));
                            int tam_dateloc = 10 - dateLeasing.length();
                            for (int i = 0; i < tam_dateloc; i++) {
                                extraDateLea += " ";
                            }
                            dateLeasing += extraDateLea;
                            // Date Devolution
                            dateDev = p.getDateDevolution();
                            dateDevolution = out.format(in.parse(dateDev.toString()));
                            int tam_datedev = 10 - dateDevolution.length();
                            for (int i = 0; i < tam_datedev; i++) {
                                extraDateDev += " ";
                            }
                            dateDevolution += extraDateDev;
                            // Hora Leasing
                            horaLea = p.getTimeLeasing();
                            horaLeasing = outTime.format(horaLea);
                            int tam_horaloc = 5 - horaLeasing.length();
                            for (int i = 0; i < tam_horaloc; i++) {
                                extraHoraLea += " ";
                            }
                            horaLeasing += extraHoraLea;
                            // Hora Devolution
                            horaDev = p.getTimeDevolution();
                            horaDevolution = outTime.format(horaDev);
                            int tam_horadev = 5 - horaDevolution.length();
                            for (int i = 0; i < tam_horadev; i++) {
                                extraHoraLea += " ";
                            }
                            horaDevolution += extraHoraLea;
                            //Number Leasing
                            numberLeasing = Integer.toString(p.getNumberLeasing());
                            int tam_numloc = 4 - numberLeasing.length();
                            for (int i = 0; i < tam_numloc; i++) {
                                extraNumberLea += "0";
                            }
                            numberLeasing = extraNumberLea + numberLeasing;
                            //Cpf Leasing
                            cpfLeasing = p.getCpfLeasing();
                            int tam_cpfloc = 14 - cpfLeasing.length();
                            for (int i = 0; i < tam_cpfloc; i++) {
                                extraCpfLeasing += " ";
                            }
                            cpfLeasing += extraCpfLeasing;
                            // Plate Leasing
                            plateLeasing = p.getPlateLeasing();
                            int tam_plateloc = 12 - plateLeasing.length();
                            for (int i = 0; i < tam_plateloc; i++) {
                                extraPlateLeasing += " ";
                            }
                            plateLeasing += extraPlateLeasing;
                            contentLeasing = numberLeasing + cpfLeasing + plateLeasing + dateLeasing + horaLeasing + dateDevolution + horaDevolution;
                            contentLeasing += "\r\n";
                            f.write(contentLeasing);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Date Exported Successfully!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Could not perform this action");
                    } catch (ParseException ex) {
                        Logger.getLogger(ViewExport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                new ViewLeasing(selected).setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Window invalid");
        }
    }//GEN-LAST:event_button_export_txtActionPerformed

    private void button_export_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_export_cancelarActionPerformed
        switch (window) {
            case "Vehicle":
                new ViewVehicle(selected).setVisible(true);
                this.dispose();
                break;
            case "Client":
                new ViewClient(selected).setVisible(true);
                this.dispose();
                break;
            case "Leasing":
                new ViewLeasing(selected).setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Window invalid");
        }
    }//GEN-LAST:event_button_export_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewExport("", "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_export_cancelar;
    private javax.swing.JButton button_export_json;
    private javax.swing.JButton button_export_txt;
    private javax.swing.JButton button_export_xml;
    private javax.swing.JLabel label_name;
    // End of variables declaration//GEN-END:variables
}
