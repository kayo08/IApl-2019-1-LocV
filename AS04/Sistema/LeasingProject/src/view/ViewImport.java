/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Date;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import json.JSONObject;
import model.bean.Client;
import model.bean.Leasing;
import model.bean.Vehicle;
import model.dao.ClientDAO;
import model.dao.LeasingDAO;
import model.dao.VehicleDAO;
import xml.DateConverter;
import java.util.List;

/**
 *
 * @author Near
 */
public class ViewImport extends javax.swing.JFrame {

    String window;
    private String selected = "Portuguese";

    /**
     * Creates new form ViewImport
     */
    public ViewImport(String window, String language) {
        this.window = window;
        initComponents();
        setLocationRelativeTo(null);
        this.selected = language;
        changeLanguage(selected);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_name = new javax.swing.JLabel();
        button_import_txt = new javax.swing.JButton();
        button_import_json = new javax.swing.JButton();
        button_import_xml = new javax.swing.JButton();
        button_import_cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_name.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        label_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_name.setText("Selecione o formato a ser importado");

        button_import_txt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        button_import_txt.setText("Txt");
        button_import_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_import_txtActionPerformed(evt);
            }
        });

        button_import_json.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        button_import_json.setText("Json");
        button_import_json.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_import_jsonActionPerformed(evt);
            }
        });

        button_import_xml.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        button_import_xml.setText("Xml");
        button_import_xml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_import_xmlActionPerformed(evt);
            }
        });

        button_import_cancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        button_import_cancelar.setText("Cancelar");
        button_import_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_import_cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(label_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(55, 55, 55))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(button_import_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(button_import_txt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(60, 60, 60)
                        .addComponent(button_import_json, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(47, 47, 47)
                .addComponent(button_import_xml, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(label_name)
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_import_txt)
                    .addComponent(button_import_json)
                    .addComponent(button_import_xml))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(button_import_cancelar)
                .addGap(58, 58, 58))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void changeLanguage(String language) {
        switch (language) {
            case "Portuguese":
                label_name.setText("Selecione o formato a ser importado");
                button_import_cancelar.setText("Cancelar");
                break;
            case "English":
                label_name.setText("Select the format to import");
                button_import_cancelar.setText("Cancel");
                break;
            case "Spanish":
                label_name.setText("Seleccione el formato que desea importar");
                button_import_cancelar.setText("Cancelar");
                break;
            default:
                label_name.setText("Selecione o formato a ser importado");
                button_import_cancelar.setText("Cancelar");

        }
    }
    private void button_import_jsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_import_jsonActionPerformed
        switch (window) {
            case "Vehicle":
                try {
                    VehicleDAO pdao = new VehicleDAO();
                    FileReader fr = new FileReader("Vehicle.json");
                    BufferedReader br = new BufferedReader(fr);
                    String str;
                    while ((str = br.readLine()) != null) {
                        Vehicle p = new Vehicle();
                        JSONObject json = new JSONObject(str);
                        p.setBrand(json.getString("brand"));
                        p.setModel(json.getString("model"));
                        p.setPlate(json.getString("plate"));
                        p.setColor(json.getString("color"));
                        p.setYear(json.getInt("year"));
                        pdao.create(p);
                    }
                    br.close();
                    JOptionPane.showMessageDialog(null, "Date Imported Successfully!");

                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not perform this action");
                }
                new ViewVehicle(selected).setVisible(true);
                this.dispose();
                break;
            case "Client":
                try {
                    DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
                    java.sql.Date dateBirth = null;
                    ClientDAO pdao = new ClientDAO();
                    FileReader fr = new FileReader("Client.json");
                    BufferedReader br = new BufferedReader(fr);
                    String str;
                    while ((str = br.readLine()) != null) {
                        String tempBirth;
                        Client p = new Client();
                        JSONObject json = new JSONObject(str);
                        tempBirth = json.getString("birth");
                        try {
                            dateBirth = new java.sql.Date(fmt.parse(tempBirth).getTime());
                        } catch (ParseException ex) {
                            Logger.getLogger(ViewImport.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        p.setName(json.getString("name"));
                        p.setCpf(json.getString("cpf"));
                        p.setRg(json.getString("rg"));
                        p.setNationality(json.getString("nationality"));
                        p.setTelephone(json.getString("telephone"));
                        p.setGender(json.getString("gender"));
                        p.setBirth(dateBirth);
                        pdao.create(p);
                    }
                    br.close();
                    JOptionPane.showMessageDialog(null, "Date Imported Successfully!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not perform this action");
                }
                new ViewClient(selected).setVisible(true);
                this.dispose();
                break;
            case "Leasing":
                try {

                    // Formatar times
                    SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
                    DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
                    java.util.Date hLoc = null;
                    java.util.Date hDev = null;
                    String locD, devD, locH, devH, cpfLeasing, plateLeasing;
                    int numberLeasing;
                    java.sql.Date dateloc = null;
                    java.sql.Date datedev = null;
                    LeasingDAO pdao = new LeasingDAO();
                    FileReader fr = new FileReader("Leasing.json");
                    BufferedReader br = new BufferedReader(fr);

                    String str;
                    while ((str = br.readLine()) != null) {
                        Leasing p = new Leasing();
                        JSONObject json = new JSONObject(str);
                        cpfLeasing = json.getString("cpf_leasing");
                        plateLeasing = json.getString("plate_leasing");
                        numberLeasing = json.getInt("number_leasing");
                        locD = json.getString("date_leasing");
                        devD = json.getString("date_devolution");
                        locH = json.getString("time_leasing");
                        devH = json.getString("time_devolution");
                        try {
                            hLoc = formatter.parse(locH);
                            hDev = formatter.parse(devH);
                            dateloc = new java.sql.Date(fmt.parse(locD).getTime());
                            datedev = new java.sql.Date(fmt.parse(devD).getTime());
                        } catch (ParseException ex) {
                            Logger.getLogger(ViewImport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Time time1 = new Time(hLoc.getTime());
                        Time time2 = new Time(hDev.getTime());
                        p.setNumberLeasing(numberLeasing);
                        p.setCpfLeasing(cpfLeasing);
                        p.setPlateLeasing(plateLeasing);
                        p.setDateLeasing(dateloc);
                        p.setDateDevolution(datedev);
                        p.setTimeLeasing(time1);
                        p.setTimeDevolution(time2);
                        pdao.create(p);
                    }
                    br.close();
                    JOptionPane.showMessageDialog(null, "Date Imported Successfully!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not perform this action");
                }
                new ViewLeasing(selected).setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Window invalid");
        }

    }//GEN-LAST:event_button_import_jsonActionPerformed

    private void button_import_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_import_txtActionPerformed
        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
        DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
        switch (window) {
            case "Vehicle":
                String brand,
                 model,
                 plate,
                 color,
                 tempYear;
                VehicleDAO dao = new VehicleDAO();
                int year;
                try {
                    FileReader fr = new FileReader("Vehicle.txt");
                    BufferedReader br = new BufferedReader(fr);
                    String str;
                    while ((str = br.readLine()) != null) {
                        brand = str.substring(0, 100);
                        model = str.substring(100, 200);
                        plate = str.substring(200, 212);
                        color = str.substring(212, 242);
                        year = Integer.parseInt(str.substring(242, 246));
                        Vehicle p = new Vehicle();
                        p.setBrand(brand);
                        p.setModel(model);
                        p.setPlate(plate);
                        p.setColor(color);
                        p.setYear(year);
                        dao.create(p);
                    }
                    br.close();
                    JOptionPane.showMessageDialog(null, "Date Imported Successfully!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not perform this action");
                }
                new ViewVehicle(selected).setVisible(true);
                this.dispose();
                break;
            case "Client":
                String name,
                 cpf,
                 rg,
                 nationality,
                 telephone,
                 gender,
                 tempBirth;
                java.sql.Date birth = null;
                ClientDAO daoClient = new ClientDAO();
                try {
                    FileReader fr = new FileReader("Client.txt");
                    BufferedReader br = new BufferedReader(fr);
                    String str;
                    while ((str = br.readLine()) != null) {
                        name = str.substring(0, 100);
                        cpf = str.substring(100, 114);
                        rg = str.substring(114, 126);
                        nationality = str.substring(126, 156);
                        telephone = str.substring(156, 186);
                        gender = str.substring(186, 216);
                        tempBirth = str.substring(216, 226);
                        birth = new java.sql.Date(fmt.parse(tempBirth).getTime());
                        Client p = new Client();
                        p.setName(name);
                        p.setCpf(cpf);
                        p.setRg(rg);
                        p.setNationality(nationality);
                        p.setTelephone(telephone);
                        p.setGender(gender);
                        p.setBirth(birth);
                        daoClient.create(p);
                    }
                    br.close();
                    JOptionPane.showMessageDialog(null, "Date Imported Successfully!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not perform this action");
                } catch (ParseException ex) {
                    Logger.getLogger(ViewImport.class.getName()).log(Level.SEVERE, null, ex);
                }
                new ViewClient(selected).setVisible(true);
                this.dispose();
                break;
            case "Leasing":
                int numberLeasing;
                String cpfLeasing,
                 plateLeasing,
                 tempDateLoc,
                 tempDateDev,
                 tempHoraLoc,
                 tempHoraDev;
                Date dateLeasing = null;
                Date dateDevolution = null;
                java.util.Date horaLoc;
                java.util.Date horaDev;
                Time horaLeasing,
                 horaDevolution;
                java.sql.Date dateLoc = null;
                java.sql.Date dateDev = null;
                LeasingDAO daoLeasing = new LeasingDAO();
                try {
                    FileReader fr = new FileReader("Leasing.txt");
                    BufferedReader br = new BufferedReader(fr);
                    String str;
                    while ((str = br.readLine()) != null) {
                        numberLeasing = Integer.parseInt(str.substring(0, 4));
                        cpfLeasing = str.substring(4, 18);
                        plateLeasing = str.substring(18, 30);
                        tempDateLoc = str.substring(30, 40);
                        tempHoraLoc = str.substring(40, 45);
                        tempDateDev = str.substring(45, 55);
                        tempHoraDev = str.substring(55, 60);
                        dateLoc = new java.sql.Date(fmt.parse(tempDateLoc).getTime());
                        dateDev = new java.sql.Date(fmt.parse(tempDateDev).getTime());
                        dateLeasing = dateLoc;
                        dateDevolution = dateDev;
                        horaLoc = formatter.parse(tempHoraLoc);
                        horaDev = formatter.parse(tempHoraDev);
                        horaLeasing = new Time(horaLoc.getTime());
                        horaDevolution = new Time(horaDev.getTime());
                        Leasing p = new Leasing();
                        p.setNumberLeasing(numberLeasing);
                        p.setCpfLeasing(cpfLeasing);
                        p.setPlateLeasing(plateLeasing);
                        p.setDateLeasing(dateLeasing);
                        p.setTimeLeasing(horaLeasing);
                        p.setDateDevolution(dateDevolution);
                        p.setTimeDevolution(horaDevolution);
                        daoLeasing.create(p);
                    }
                    br.close();
                    JOptionPane.showMessageDialog(null, "Date Imported Successfully!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Could not perform this action");
                } catch (ParseException ex) {
                    Logger.getLogger(ViewImport.class.getName()).log(Level.SEVERE, null, ex);
                }
                new ViewLeasing(selected).setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Window invalid");
        }
    }//GEN-LAST:event_button_import_txtActionPerformed

    private void button_import_xmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_import_xmlActionPerformed
        switch (window) {
            case "Vehicle": {
                try {
                    List<Vehicle> lista = new ArrayList<>();
                    VehicleDAO dao = new VehicleDAO();
                    FileReader fr = new FileReader("vehicle.xml");
                    XStream xstream = new XStream(new DomDriver());
                    xstream.autodetectAnnotations(true);
                    xstream.registerConverter(new DateConverter());
                    lista = (List<Vehicle>) xstream.fromXML(fr);
                    for (int i = 0; i < lista.size(); i++) {
                        Vehicle teste = new Vehicle(lista.get(i));
                        dao.create(teste);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ViewImport.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            new ViewVehicle(selected).setVisible(true);
            this.dispose();
            break;
            case "Client":
                new ViewClient(selected).setVisible(true);
                this.dispose();
                break;
            case "Leasing":
                new ViewLeasing(selected).setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Window invalid");
        }
    }//GEN-LAST:event_button_import_xmlActionPerformed

    private void button_import_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_import_cancelarActionPerformed
        switch (window) {
            case "Vehicle":
                new ViewVehicle(selected).setVisible(true);
                this.dispose();
                break;
            case "Client":
                new ViewClient(selected).setVisible(true);
                this.dispose();
                break;
            case "Leasing":
                new ViewLeasing(selected).setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Window invalid");
        }
    }//GEN-LAST:event_button_import_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewImport("", "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_import_cancelar;
    private javax.swing.JButton button_import_json;
    private javax.swing.JButton button_import_txt;
    private javax.swing.JButton button_import_xml;
    private javax.swing.JLabel label_name;
    // End of variables declaration//GEN-END:variables
}
