/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Date;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.input.DataFormat;
import javax.swing.JOptionPane;
import json.JSONArray;
import json.JSONObject;
import model.bean.Cliente;
import model.bean.Locacao;
import model.bean.Veiculo;
import model.dao.ClienteDAO;
import model.dao.LocacaoDAO;
import model.dao.VeiculoDAO;

/**
 *
 * @author Near
 */
public class ViewImport extends javax.swing.JFrame {

    String janela;

    /**
     * Creates new form ViewImport
     */
    public ViewImport(String janela) {
        this.janela = janela;
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        botao_import_txt = new javax.swing.JButton();
        botao_import_json = new javax.swing.JButton();
        botao_import_xml = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Selecione o formato a ser importado");

        botao_import_txt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botao_import_txt.setText("Txt");
        botao_import_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_import_txtActionPerformed(evt);
            }
        });

        botao_import_json.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botao_import_json.setText("Json");
        botao_import_json.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_import_jsonActionPerformed(evt);
            }
        });

        botao_import_xml.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botao_import_xml.setText("Xml");
        botao_import_xml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_import_xmlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(55, 55, 55))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(botao_import_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(botao_import_json, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(botao_import_xml, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botao_import_txt)
                    .addComponent(botao_import_json)
                    .addComponent(botao_import_xml))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botao_import_jsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_import_jsonActionPerformed
        switch (janela) {
            case "Veiculo":
                try {
                    VeiculoDAO pdao = new VeiculoDAO();
                    FileReader fr = new FileReader("Veiculo.json");
                    BufferedReader br = new BufferedReader(fr);
                    String str;
                    while ((str = br.readLine()) != null) {
                        Veiculo p = new Veiculo();
                        JSONObject json = new JSONObject(str);
                        p.setMarca(json.getString("marca"));
                        p.setModelo(json.getString("modelo"));
                        p.setPlaca(json.getString("placa"));
                        p.setCor(json.getString("cor"));
                        p.setAno(json.getInt("ano"));
                        pdao.create(p);
                    }
                    br.close();
                    JOptionPane.showMessageDialog(null, "Dados Importados com sucesso!");

                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                }
                new ViewVeiculo().setVisible(true);
                this.dispose();
                break;
            case "Cliente":
                try {
                    DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
                    java.sql.Date dataNascimento = null;
                    ClienteDAO pdao = new ClienteDAO();
                    FileReader fr = new FileReader("Cliente.json");
                    BufferedReader br = new BufferedReader(fr);
                    String str;
                    while ((str = br.readLine()) != null) {
                        String tempNascimento;
                        Cliente p = new Cliente();
                        JSONObject json = new JSONObject(str);
                        tempNascimento = json.getString("nascimento");
                        try {
                            dataNascimento = new java.sql.Date(fmt.parse(tempNascimento).getTime());
                        } catch (ParseException ex) {
                            Logger.getLogger(ViewImport.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        p.setNome(json.getString("nome"));
                        p.setCpf(json.getString("cpf"));
                        p.setRg(json.getString("rg"));
                        p.setNacionalidade(json.getString("nacionalidade"));
                        p.setTelefone(json.getString("telefone"));
                        p.setSexo(json.getString("sexo"));
                        p.setNascimento(dataNascimento);
                        pdao.create(p);
                    }
                    br.close();
                    JOptionPane.showMessageDialog(null, "Dados Importados com sucesso!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                }
                new ViewCliente().setVisible(true);
                this.dispose();
                break;
            case "Locacao":
                try {

                    // Formatar horarios
                    SimpleDateFormat formatador = new SimpleDateFormat("HH:mm");
                    DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
                    java.util.Date hLoc = null;
                    java.util.Date hDev = null;
                    String locD, devD, locH, devH;
                    java.sql.Date dataloc = null;
                    java.sql.Date datadev = null;
                    LocacaoDAO pdao = new LocacaoDAO();
                    FileReader fr = new FileReader("Locacao.json");
                    BufferedReader br = new BufferedReader(fr);

                    String str;
                    while ((str = br.readLine()) != null) {
                        Locacao p = new Locacao();
                        JSONObject json = new JSONObject(str);
                        locD = json.getString("data_locacao");
                        devD = json.getString("data_devolucao");
                        locH = json.getString("hora_locacao");
                        devH = json.getString("hora_devolucao");
                        try {
                            hLoc = formatador.parse(locH);
                            hDev = formatador.parse(devH);
                            dataloc = new java.sql.Date(fmt.parse(locD).getTime());
                            datadev = new java.sql.Date(fmt.parse(devD).getTime());
                        } catch (ParseException ex) {
                            Logger.getLogger(ViewImport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Time time1 = new Time(hLoc.getTime());
                        Time time2 = new Time(hDev.getTime());
                        p.setNumeroLocacao(json.getInt("numero_locacao"));
                        p.setCpfLocacao(json.getString("cpf_locacao"));
                        p.setPlacaLocacao(json.getString("placa_locacao"));
                        p.setDataLocacao(dataloc);
                        p.setDataDevolucao(datadev);
                        p.setHorarioLocacao(time1);
                        p.setHorarioDevolucao(time2);
                        pdao.create(p);
                    }
                    br.close();
                    JOptionPane.showMessageDialog(null, "Dados Importados com sucesso!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                }
                new ViewLocacao().setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Janela inválida");
        }
        this.dispose();

    }//GEN-LAST:event_botao_import_jsonActionPerformed

    private void botao_import_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_import_txtActionPerformed
        switch (janela) {
            case "Veiculo":
                break;
            case "Cliente":
                break;
            case "Locacao":
                break;
            default:
                System.out.println("Janela inválida");
        }
        this.dispose();
    }//GEN-LAST:event_botao_import_txtActionPerformed

    private void botao_import_xmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_import_xmlActionPerformed
        switch (janela) {
            case "Veiculo":
                break;
            case "Cliente":
                break;
            case "Locacao":
                break;
            default:
                System.out.println("Janela inválida");
        }
        this.dispose();
    }//GEN-LAST:event_botao_import_xmlActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewImport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewImport("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botao_import_json;
    private javax.swing.JButton botao_import_txt;
    private javax.swing.JButton botao_import_xml;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
