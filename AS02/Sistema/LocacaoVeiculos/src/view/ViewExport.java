/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Date;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import json.JSONObject;
import model.bean.Cliente;
import model.bean.Locacao;
import model.bean.Veiculo;
import model.dao.ClienteDAO;
import model.dao.LocacaoDAO;
import model.dao.VeiculoDAO;
import xml.ConverteData;

/**
 *
 * @author Near
 */
public class ViewExport extends javax.swing.JFrame {

    String janela = "";

    /**
     * Creates new form ViewExport
     */
    public ViewExport(String janela) {
        this.janela = janela;
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        botao_exportar_txt = new javax.swing.JButton();
        botao_exportar_json = new javax.swing.JButton();
        botao_exportar_xml = new javax.swing.JButton();
        botao_export_cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Selecione o formato a ser exportado");

        botao_exportar_txt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botao_exportar_txt.setText("Txt");
        botao_exportar_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_exportar_txtActionPerformed(evt);
            }
        });

        botao_exportar_json.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botao_exportar_json.setText("Json");
        botao_exportar_json.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_exportar_jsonActionPerformed(evt);
            }
        });

        botao_exportar_xml.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botao_exportar_xml.setText("Xml");
        botao_exportar_xml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_exportar_xmlActionPerformed(evt);
            }
        });

        botao_export_cancelar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        botao_export_cancelar.setText("Cancelar");
        botao_export_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao_export_cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(56, 56, 56))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botao_export_cancelar)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botao_exportar_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(botao_exportar_json, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botao_exportar_xml, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botao_exportar_txt)
                    .addComponent(botao_exportar_json)
                    .addComponent(botao_exportar_xml))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(botao_export_cancelar)
                .addGap(58, 58, 58))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botao_exportar_jsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_exportar_jsonActionPerformed
        switch (janela) {
            case "Veiculo":
                File veiculo = new File("Veiculo.json");
                if(veiculo.exists())
                veiculo.delete();
                String conteudoVeiculo;
                try {

                    VeiculoDAO pdao = new VeiculoDAO();
                    FileWriter f = new FileWriter(veiculo, true);
                    for (Veiculo p : pdao.read()) {
                        JSONObject json = new JSONObject();
                        conteudoVeiculo = p.toJson().toString();
                        conteudoVeiculo += "\r\n";
                        f.write(conteudoVeiculo);
                    }
                    f.close();
                    JOptionPane.showMessageDialog(null, "Dados Exportados com sucesso!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                }
                new ViewVeiculo().setVisible(true);
                this.dispose();
                break;
            case "Cliente":
                File cliente = new File("Cliente.json");
                if(cliente.exists())
                cliente.delete();
                String conteudoCliente;
                try {

                    ClienteDAO pdao = new ClienteDAO();
                    FileWriter f = new FileWriter(cliente, true);
                    for (Cliente p : pdao.read()) {
                        JSONObject json = new JSONObject();
                        conteudoCliente = p.toJson().toString();
                        conteudoCliente += "\r\n";
                        f.write(conteudoCliente);
                    }
                    f.close();
                    JOptionPane.showMessageDialog(null, "Dados Exportados com sucesso!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                }
                new ViewCliente().setVisible(true);
                this.dispose();
                break;
            case "Locacao":
                File locacao = new File("Locacao.json");
               if(locacao.exists())
                locacao.delete();
                String conteudoLocacao;
                try {

                    LocacaoDAO pdao = new LocacaoDAO();
                    FileWriter f = new FileWriter(locacao, true);
                    for (Locacao p : pdao.read()) {
                        JSONObject json = new JSONObject();
                        conteudoLocacao = p.toJson().toString();
                        conteudoLocacao += "\r\n";
                        f.write(conteudoLocacao);
                    }
                    f.close();
                    JOptionPane.showMessageDialog(null, "Dados Exportados com sucesso!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                }
                new ViewLocacao().setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Janela inválida");
        }
    }//GEN-LAST:event_botao_exportar_jsonActionPerformed

    private void botao_exportar_xmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_exportar_xmlActionPerformed
        switch (janela) {
            case "Veiculo":
                File veiculoFile = new File("Veiculo.xml");
                if(veiculoFile.exists())
                veiculoFile.delete();
                VeiculoDAO pdao = new VeiculoDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(veiculoFile, true);
                        for (Veiculo p : pdao.read()) {
                            XStream xstream = new XStream(new DomDriver());
                            xstream.autodetectAnnotations(true);
                            xstream.registerConverter(new ConverteData());
                            String xml = xstream.toXML(p);
                            f.write(xml);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Dados Exportados com sucesso!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                    }
                }
                new ViewVeiculo().setVisible(true);
                this.dispose();
                break;
            case "Cliente":
                File ClienteFile = new File("Cliente.xml");
                if(ClienteFile.exists())
                ClienteFile.delete();
                ClienteDAO pdaoCliente = new ClienteDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(ClienteFile, true);
                        for (Cliente p : pdaoCliente.read()) {
                            XStream xstream = new XStream(new DomDriver());
                            xstream.autodetectAnnotations(true);
                            xstream.registerConverter(new ConverteData());
                            String xml = xstream.toXML(p);
                            f.write(xml);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Dados Exportados com sucesso!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                    }
                }
                new ViewCliente().setVisible(true);
                this.dispose();
                break;
            case "Locacao":
                File LocacaoFile = new File("Locacao.xml");
                 if(LocacaoFile.exists())
                LocacaoFile.delete();
                LocacaoDAO pdaoLocacao = new LocacaoDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(LocacaoFile, true);
                        for (Locacao p : pdaoLocacao.read()) {
                            XStream xstream = new XStream(new DomDriver());
                            xstream.autodetectAnnotations(true);
                            xstream.registerConverter(new ConverteData());
                            String xml = xstream.toXML(p);
                            f.write(xml);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Dados Exportados com sucesso!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                    }
                }
                 new ViewLocacao().setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Janela inválida");
        }
    }//GEN-LAST:event_botao_exportar_xmlActionPerformed

    private void botao_exportar_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_exportar_txtActionPerformed
        SimpleDateFormat in = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat out = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat outTime = new SimpleDateFormat("HH:mm");
        switch (janela) {
            case "Veiculo":
                File veiculoFile = new File("Veiculo.txt");
                if(veiculoFile.exists())
                veiculoFile.delete();
                String marca,
                 conteudoVeiculo = "",
                 modelo,
                 placa,
                 cor,
                 ano;
                VeiculoDAO pdao = new VeiculoDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(veiculoFile, true);
                        for (Veiculo p : pdao.read()) {
                            String extraMarca = "";
                            String extraModelo = "";
                            String extraPlaca = "";
                            String extraCor = "";
                            String extraAno = "";
                            //Marca
                            marca = p.getMarca();
                            int tam_marca = 100 - marca.length();
                            for (int i = 0; i < tam_marca; i++) {
                                extraMarca += " ";
                            }
                            marca += extraMarca;
                            //Modelo
                            modelo = p.getModelo();
                            int tam_modelo = 100 - modelo.length();
                            for (int i = 0; i < tam_modelo; i++) {
                                extraModelo += " ";
                            }
                            modelo += extraModelo;
                            // Placa
                            placa = p.getPlaca();
                            int tam_placa = 12 - placa.length();
                            for (int i = 0; i < tam_placa; i++) {
                                extraPlaca += " ";
                            }
                            placa += extraPlaca;
                            // Cor
                            cor = p.getCor();
                            int tam_cor = 30 - cor.length();
                            for (int i = 0; i < tam_cor; i++) {
                                extraCor += " ";
                            }
                            cor += extraCor;
                            // Ano
                            ano = Integer.toString(p.getAno());
                            int tam_ano = 4 - ano.length();
                            for (int i = 0; i < tam_ano; i++) {
                                extraAno += "0";
                            }
                            ano = extraAno + ano;
                            conteudoVeiculo = marca + modelo + placa + cor + ano;
                            conteudoVeiculo += "\r\n";
                            f.write(conteudoVeiculo);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Dados Exportados com sucesso!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                    }
                }
                new ViewVeiculo().setVisible(true);
                this.dispose();
                break;
            case "Cliente":
                File clienteFile = new File("Cliente.txt");
                if(clienteFile.exists())
                clienteFile.delete();
                String conteudoCliente = "",
                 cpf,
                 nome,
                 rg,
                 nacionalidade,
                 telefone,
                 sexo,
                 nascimento;
                Date nascimentoTemp;
                ClienteDAO pdaoCliente = new ClienteDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(clienteFile, true);
                        for (Cliente p : pdaoCliente.read()) {
                            String extraCpf = "";
                            String extraNome = "";
                            String extraRg = "";
                            String extraNacionalidade = "";
                            String extraTelefone = "";
                            String extraSexo = "";
                            String extraNascimento = "";
                            //CPF
                            cpf = p.getCpf();
                            int tam_cpf = 14 - cpf.length();
                            for (int i = 0; i < tam_cpf; i++) {
                                extraCpf += " ";
                            }
                            cpf += extraCpf;
                            //Nome
                            nome = p.getNome();
                            int tam_nome = 100 - nome.length();
                            for (int i = 0; i < tam_nome; i++) {
                                extraNome += " ";
                            }
                            nome += extraNome;
                            //Rg
                            rg = p.getRg();
                            int tam_rg = 12 - rg.length();
                            for (int i = 0; i < tam_rg; i++) {
                                extraRg += " ";
                            }
                            rg += extraRg;
                            //Nacionalidade
                            nacionalidade = p.getNacionalidade();
                            int tam_nacionalidade = 30 - nacionalidade.length();
                            for (int i = 0; i < tam_nacionalidade; i++) {
                                extraNacionalidade += " ";
                            }
                            nacionalidade += extraNacionalidade;
                            //Telefone
                            telefone = p.getTelefone();
                            int tam_telefone = 30 - telefone.length();
                            for (int i = 0; i < tam_telefone; i++) {
                                extraTelefone += " ";
                            }
                            telefone += extraTelefone;
                            //Sexo
                            sexo = p.getSexo();
                            int tam_sexo = 30 - sexo.length();
                            for (int i = 0; i < tam_sexo; i++) {
                                extraSexo += " ";
                            }
                            sexo += extraSexo;
                            //Nascimento
                            nascimentoTemp = p.getNascimento();
                            nascimento = out.format(in.parse(nascimentoTemp.toString()));
                            int tam_nascimento = 10 - nascimento.length();
                            for (int i = 0; i < tam_nascimento; i++) {
                                extraNascimento += " ";
                            }
                            nascimento += extraNascimento;
                            conteudoCliente = nome + cpf + rg + nacionalidade + telefone + sexo + nascimento;
                            conteudoCliente += "\r\n";
                            f.write(conteudoCliente);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Dados Exportados com sucesso!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                    } catch (ParseException ex) {
                        Logger.getLogger(ViewExport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                new ViewCliente().setVisible(true);
                this.dispose();
                break;
            case "Locacao":
                File locacaoFile = new File("Locacao.txt");
                if(locacaoFile.exists())
                locacaoFile.delete();
                String conteudoLocacao = "",
                 cpfLocacao,
                 placaLocacao,
                 dataLocacao,
                 dataDevolucao,
                 horaLocacao,
                 horaDevolucao,
                 numeroLocacao;
                Date dataLoc,
                 dataDev;
                Time horaLoc,
                 horaDev;
                LocacaoDAO daoLocacao = new LocacaoDAO();
                 {
                    try {
                        FileWriter f = new FileWriter(locacaoFile, true);
                        for (Locacao p : daoLocacao.read()) {
                            String extraDataLoc = "";
                            String extraDataDev = "";
                            String extraHoraLoc = "";
                            String extraHoraDev = "";
                            String extraNumeroLoc = "";
                            String extraCpfLocacao = "";
                            String extraPlacaLocacao = "";
                            // Data Locacao
                            dataLoc = p.getDataLocacao();
                            dataLocacao = out.format(in.parse(dataLoc.toString()));
                            int tam_dataloc = 10 - dataLocacao.length();
                            for (int i = 0; i < tam_dataloc; i++) {
                                extraDataLoc += " ";
                            }
                            dataLocacao += extraDataLoc;
                            // Data Devolucao
                            dataDev = p.getDataDevolucao();
                            dataDevolucao = out.format(in.parse(dataDev.toString()));
                            int tam_datadev = 10 - dataDevolucao.length();
                            for (int i = 0; i < tam_datadev; i++) {
                                extraDataDev += " ";
                            }
                            dataDevolucao += extraDataDev;
                            // Hora Locacao
                            horaLoc = p.getHorarioLocacao();
                            horaLocacao = outTime.format(horaLoc);
                            int tam_horaloc = 5 - horaLocacao.length();
                            for (int i = 0; i < tam_horaloc; i++) {
                                extraHoraLoc += " ";
                            }
                            horaLocacao += extraHoraLoc;
                            // Hora Devolucao
                            horaDev = p.getHorarioDevolucao();
                            horaDevolucao = outTime.format(horaDev);
                            int tam_horadev = 5 - horaDevolucao.length();
                            for (int i = 0; i < tam_horadev; i++) {
                                extraHoraLoc += " ";
                            }
                            horaDevolucao += extraHoraLoc;
                            //Numero Locacao
                            numeroLocacao = Integer.toString(p.getNumeroLocacao());
                            int tam_numloc = 4 - numeroLocacao.length();
                            for (int i = 0; i < tam_numloc; i++) {
                                extraNumeroLoc += "0";
                            }
                            numeroLocacao = extraNumeroLoc + numeroLocacao;
                            //Cpf Locacao
                            cpfLocacao = p.getCpfLocacao();
                            int tam_cpfloc = 14 - cpfLocacao.length();
                            for (int i = 0; i < tam_cpfloc; i++) {
                                extraCpfLocacao += " ";
                            }
                            cpfLocacao += extraCpfLocacao;
                            // Placa Locacao
                            placaLocacao = p.getPlacaLocacao();
                            int tam_placaloc = 12 - placaLocacao.length();
                            for (int i = 0; i < tam_placaloc; i++) {
                                extraPlacaLocacao += " ";
                            }
                            placaLocacao += extraPlacaLocacao;
                            conteudoLocacao = numeroLocacao + cpfLocacao + placaLocacao + dataLocacao + horaLocacao + dataDevolucao + horaDevolucao;
                            conteudoLocacao += "\r\n";
                            f.write(conteudoLocacao);
                        }
                        f.close();
                        JOptionPane.showMessageDialog(null, "Dados Exportados com sucesso!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Não foi possível realizar esta ação");
                    } catch (ParseException ex) {
                        Logger.getLogger(ViewExport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                new ViewLocacao().setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Janela inválida");
        }
    }//GEN-LAST:event_botao_exportar_txtActionPerformed

    private void botao_export_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao_export_cancelarActionPerformed
        switch (janela) {
            case "Veiculo":
                new ViewVeiculo().setVisible(true);
                this.dispose();
                break;
            case "Cliente":
                new ViewCliente().setVisible(true);
                this.dispose();
                break;
            case "Locacao":
                new ViewLocacao().setVisible(true);
                this.dispose();
                break;
            default:
                System.out.println("Janela inválida");
        }
    }//GEN-LAST:event_botao_export_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewExport("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botao_export_cancelar;
    private javax.swing.JButton botao_exportar_json;
    private javax.swing.JButton botao_exportar_txt;
    private javax.swing.JButton botao_exportar_xml;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
